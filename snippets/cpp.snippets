# comment
# snippet <trigger> <description>
# <snippet-body>
# snippet if C-style if
# if ($1)
# 	$0

priority 5000
snippet inc Include within project
	#include "$1"

snippet cinc Include within project
	#include <${1:stdio}.h>

snippet ostr ostream overloading
	std::ostream& operator<<(std::ostream &stream, const $1& var) {
		return stream << $2;
	}

snippet fow Open a file and write to it
    std::ofstream o;
    o.open(${1:filename});
    o << ${2:data};
    o.close();
	$3

snippet aconstr All constructors
    inline $1()=default;
    inline $1(const $1&)=default;
    inline $1($1&&)=default;
    inline $1& operator=(const $1&)=default;
    inline $1& operator=($1&&)=default;

snippet endl std::endl
	 << std::endl;$0

snippet er throw std::runtime_error
	throw std::runtime_error("$1");

snippet err throw std::runtime_error on invalid c-style return
	if(r != $1})
		throw std::runtime_error("$2");

snippet eri throw std::runtime_error conditionally
	if(${1})
		throw std::runtime_error("$2");

snippet util faster compiletimes on std::move and std::forward
	// static_cast to rvalue reference
	#define MOV(...) \ 
	  static_cast<std::remove_reference_t<decltype(__VA_ARGS__)>&&>(__VA_ARGS__)

	// static_cast to identity
	// The extra && aren't necessary as discussed above, but make it more robust in case it's used with a non-reference.
	#define FWD(...) \
	  static_cast<decltype(__VA_ARGS__)&&>(__VA_ARGS__)

snippet fin finally - do stuff at scope exit
	auto atexit = finally([${1:&}]{
		$2
	});

snippet finally_def finally definition from GSL
	//Copyright (c) 2015 Microsoft Corporation. All rights reserved. 
	 
	//This code is licensed under the MIT License (MIT). 
	//
	//Permission is hereby granted, free of charge, to any person obtaining a copy 
	//of this software and associated documentation files (the "Software"), to deal 
	//in the Software without restriction, including without limitation the rights 
	//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
	//of the Software, and to permit persons to whom the Software is furnished to do 
	//so, subject to the following conditions: 
	//
	//The above copyright notice and this permission notice shall be included in all 
	//copies or substantial portions of the Software. 
	//
	//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
	//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
	//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
	//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
	//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
	//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
	//THE SOFTWARE. 


	// taken from microsofts implementation of the guidelines support library

	#include <utility>

	// final_action allows you to ensure something gets run at the end of a scope
	template <class F>
	class final_action
	{
	public:
		static_assert(!std::is_reference<F>::value && !std::is_const<F>::value &&
						  !std::is_volatile<F>::value,
					  "Final_action should store its callable by value");

		explicit final_action(F f) noexcept : f_(std::move(f)) {}

		final_action(final_action&& other) noexcept
			: f_(std::move(other.f_)), invoke_(std::exchange(other.invoke_, false))
		{}

		final_action(const final_action&) = delete;
		final_action& operator=(const final_action&) = delete;
		final_action& operator=(final_action&&) = delete;

		~final_action() noexcept
		{
			if (invoke_) f_();
		}

	private:
		F f_;
		bool invoke_{true};
	};

	// finally() - convenience function to generate a final_action
	template <class F>
	[[nodiscard]] final_action<typename std::remove_cv<typename std::remove_reference<F>::type>::type>
	finally(F&& f) noexcept
	{
		return final_action<typename std::remove_cv<typename std::remove_reference<F>::type>::type>(
			std::forward<F>(f));
	}

snippet log_def quick c-style dbg logging
	#define $1_DEBUG 1
	#define $1_LOG(fmt, ...) \
		do { if ($1_DEBUG) fprintf(stderr, "$1: " fmt, __VA_ARGS__); } while (0) //formatted debug message while preserving possible compilation errors
	endsnippet
